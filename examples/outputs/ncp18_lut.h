/**
	******************************************************************************
	* @file ncp18_lut.h
	* @date 2025-9-11
	* Generated using https://github.com/Eriosies/thermistor-lut-gen
	*
	******************************************************************************
	* Thermistor CSV metadata
	*	Name - NCP18XH
	*	Part_Number - NCP18XH103F03RB
	*	Type - NTC
	*	Manufacturer - Murata
	*	Nominal_Resistance - 10000
	*	B_Constant - 3380
	*	Temperature Format - Celsius
	*
	******************************************************************************
	* Configuration of generation
	*	Input File - Murata_NCP18XH103F03RB_10k_3380k_0603.csv
	*	LUT Size - 256
	*	ADC Resolution - 12
	*	Reference voltage - 3.30
	*	Series Resistor - 10000
	*	Parallel Resistor - 0
	*	Fixed Point - 0dp
	*	Upper temperature limit - 125.0
	*	Lower temperature limit - -40.0
	*
	******************************************************************************
	*/

#ifndef NCP18_LUT_H
#define NCP18_LUT_H

#include "stdint.h"

#define NCP18_LUT_USE_FLOAT 1
#define NCP18_LUT_USE_INT 0

#define NCP18_LUT_SIZE 256U
#define NCP18_LUT_SIZE_BITS 8U
#define NCP18_LUT_ADC_RESOLUTION 12U


#if NCP18_LUT_USE_FLOAT

static const float ncp18_lut_float[NCP18_LUT_SIZE] = {
	125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 125.00f, 124.83f, 121.43f, 118.29f, 
	115.39f, 112.68f, 110.15f, 107.78f, 105.54f, 103.42f, 101.41f, 99.50f, 97.68f, 95.94f, 94.28f, 92.68f, 91.15f, 89.67f, 88.25f, 86.88f, 
	85.56f, 84.27f, 83.03f, 81.83f, 80.66f, 79.53f, 78.42f, 77.35f, 76.30f, 75.28f, 74.29f, 73.31f, 72.37f, 71.44f, 70.53f, 69.64f, 
	68.77f, 67.92f, 67.08f, 66.27f, 65.46f, 64.67f, 63.90f, 63.13f, 62.38f, 61.65f, 60.92f, 60.21f, 59.51f, 58.81f, 58.13f, 57.46f, 
	56.80f, 56.14f, 55.50f, 54.86f, 54.23f, 53.61f, 53.00f, 52.40f, 51.80f, 51.21f, 50.62f, 50.04f, 49.47f, 48.91f, 48.35f, 47.79f, 
	47.24f, 46.70f, 46.16f, 45.63f, 45.10f, 44.57f, 44.05f, 43.54f, 43.03f, 42.52f, 42.02f, 41.52f, 41.02f, 40.53f, 40.04f, 39.56f, 
	39.08f, 38.60f, 38.13f, 37.65f, 37.19f, 36.72f, 36.26f, 35.80f, 35.34f, 34.88f, 34.43f, 33.98f, 33.53f, 33.08f, 32.64f, 32.20f, 
	31.76f, 31.32f, 30.88f, 30.45f, 30.02f, 29.59f, 29.16f, 28.73f, 28.30f, 27.88f, 27.45f, 27.03f, 26.61f, 26.19f, 25.77f, 25.35f, 
	24.94f, 24.52f, 24.11f, 23.69f, 23.28f, 22.87f, 22.46f, 22.04f, 21.63f, 21.22f, 20.81f, 20.41f, 20.00f, 19.59f, 19.18f, 18.77f, 
	18.36f, 17.96f, 17.55f, 17.14f, 16.73f, 16.33f, 15.92f, 15.51f, 15.10f, 14.69f, 14.29f, 13.88f, 13.47f, 13.06f, 12.65f, 12.24f, 
	11.82f, 11.41f, 11.00f, 10.58f, 10.17f, 9.75f, 9.33f, 8.91f, 8.49f, 8.07f, 7.65f, 7.23f, 6.80f, 6.38f, 5.95f, 5.52f, 
	5.09f, 4.65f, 4.22f, 3.78f, 3.34f, 2.90f, 2.45f, 2.01f, 1.56f, 1.10f, 0.65f, 0.19f, -0.27f, -0.73f, -1.20f, -1.67f, 
	-2.14f, -2.62f, -3.10f, -3.58f, -4.07f, -4.57f, -5.06f, -5.57f, -6.07f, -6.59f, -7.10f, -7.63f, -8.15f, -8.69f, -9.23f, -9.78f, 
	-10.33f, -10.89f, -11.46f, -12.03f, -12.62f, -13.21f, -13.81f, -14.42f, -15.04f, -15.67f, -16.32f, -16.97f, -17.63f, -18.31f, -19.00f, -19.71f, 
	-20.43f, -21.17f, -21.93f, -22.70f, -23.49f, -24.31f, -25.14f, -26.01f, -26.89f, -27.81f, -28.76f, -29.74f, -30.76f, -31.82f, -32.92f, -34.08f, 
	-35.29f, -36.56f, -37.90f, -39.33f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f, -40.00f };

__attribute__((always_inline)) static inline float ncp18_lut_get_temp_float(uint32_t adcValue)
{
	uint32_t index = adcValue >> (NCP18_LUT_ADC_RESOLUTION - NCP18_LUT_SIZE_BITS);
	return ncp18_lut_float[index];
}

#endif

#if NCP18_LUT_USE_INT

static const int8_t ncp18_lut_int[NCP18_LUT_SIZE] = {
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 124, 121, 118, 
	115, 112, 110, 107, 105, 103, 101, 99, 97, 95, 94, 92, 91, 89, 88, 86, 
	85, 84, 83, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 
	68, 67, 67, 66, 65, 64, 63, 63, 62, 61, 60, 60, 59, 58, 58, 57, 
	56, 56, 55, 54, 54, 53, 53, 52, 51, 51, 50, 50, 49, 48, 48, 47, 
	47, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 41, 41, 40, 40, 39, 
	39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 34, 33, 33, 33, 32, 32, 
	31, 31, 30, 30, 30, 29, 29, 28, 28, 27, 27, 27, 26, 26, 25, 25, 
	24, 24, 24, 23, 23, 22, 22, 22, 21, 21, 20, 20, 19, 19, 19, 18, 
	18, 17, 17, 17, 16, 16, 15, 15, 15, 14, 14, 13, 13, 13, 12, 12, 
	11, 11, 10, 10, 10, 9, 9, 8, 8, 8, 7, 7, 6, 6, 5, 5, 
	5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, -1, -1, 
	-2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, 
	-10, -10, -11, -12, -12, -13, -13, -14, -15, -15, -16, -16, -17, -18, -19, -19, 
	-20, -21, -21, -22, -23, -24, -25, -26, -26, -27, -28, -29, -30, -31, -32, -34, 
	-35, -36, -37, -39, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40 };

__attribute__((always_inline)) static inline int8_t ncp18_lut_get_temp_int(uint32_t adcValue)
{
	uint32_t index = adcValue >> (NCP18_LUT_ADC_RESOLUTION - NCP18_LUT_SIZE_BITS);
	return ncp18_lut_int[index];
}

#endif

#endif